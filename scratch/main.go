package main

import (
	"crypto"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"fmt"
	"log"
	"strconv"
)

func main() {
	privKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		log.Fatalf("generating random key: %v", err)
	}

	plainText := []byte("The bourgeois human is a virus on the hard drive of the working robot!")

	// use the public key to encrypt the message
	cipherText, err := rsa.EncryptPKCS1v15(rand.Reader, &privKey.PublicKey, plainText)
	if err != nil {
		log.Fatalf("could not encrypt data: %v", err)
	}
	fmt.Printf("%s\n", strconv.Quote(string(cipherText)))

	decryptedText, err := rsa.DecryptPKCS1v15(nil, privKey, cipherText)
	if err != nil {
		log.Fatalf("error decrypting cipher text: %v", err)
	}
	fmt.Printf("%s\n", decryptedText)

	hash := sha256.Sum256(plainText)
	fmt.Printf("The hash of my message is: %#x\n", hash)
	// The hash of my message is: 0xe6a8502561b8e2328b856b4dbe6a9448d2bf76f02b7820e5d5d4907ed2e6db80

	// generate a signature using the private key
	signature, err := rsa.SignPKCS1v15(rand.Reader, privKey, crypto.SHA256, hash[:])
	if err != nil {
		log.Fatalf("error creating signature: %v", err)
	}
	log.Println("signature is \n", signature)

	verify := func(pub *rsa.PublicKey, msg, signature []byte) error {
		hash := sha256.Sum256(msg)
		return rsa.VerifyPKCS1v15(pub, crypto.SHA256, hash[:], signature)
	}

	fmt.Println(verify(&privKey.PublicKey, plainText, []byte("a bad signature")))
	fmt.Println(verify(&privKey.PublicKey, []byte("a different plain text"), signature))
	fmt.Println(verify(&privKey.PublicKey, plainText, signature))
}

// &rsa.PrivateKey{
// 		PublicKey:rsa.PublicKey{
// 			N:26739357020715919730082657554713902871374737657988288089037236618775689721471011667658598034176873991370964711671429611951900067928443748429232886599214891118389591966265478347327833200230992015961543364361126207191851628497408455996968960002117012489954470086523279178403841407590633425005342070909495414125372786638968916517271126592939614499690151034341417588835791188971772786233296257030455978479338109996679614295724946534870072042243415840273669956946496474651344383189524210714908547805579476219242079337163972997909216763897261044703107407383480285805913613969118567346516917198041503709840497850682234804799, 
// 			E:65537
// 		}, 
// 		D:17106382986825096762487992787226907024858150751277521929735328436080509375652152313806277977004345573282427292464531933721520883593021667766184708431043269297049306839947094170749562271481526500346668731213954536962826544211832160986693281444203426807243558101799922579808930202725979028795931718067998447106531339140560100999339694740640079723580099559087568346600247937416387842475612877731128982929646463045765162327328364135053796901672107667741061048197834841895726939041910386685996006643108547771723934345019947537948795931537608096208908100921236087087747737816059574188956224196483101317773510111194895729817, 
// 		Primes:[]*big.Int{
// 			150334407008381473801219871354271077252076539182105565180947753023068724725125603012709034256015580148449252435437992648183470583355599350528377331191411949920322373248402243335571973536338216685822448352447067799476517238351410998311226351075734818476138399141877423270985122706281020745126514853020966070723, 
// 			177865849560474481213471149821828149600309217321117859246694771020189976734057524820213131781215051406407397101393663159493606788511092177947503184208074196462358466067492062729823842917858978537510754004022548297281884085252477713497965197551453592416957138331162332960459786831662860643466993416785463609813
// 		}, 
// 		Precomputed:rsa.PrecomputedValues{
// 			Dp:91629276407980193951351568751184188791586391773032131485312998680233764272779379775434676188359893633059270160879665171303061361553617285760044440460212556869665642299882930406326540471932344561319219668866413220777415522314831504761309437321211335948080448505764585998130837946540051782414187951903848050643, 
// 			Dq:155692665085916956280775736634707347881668963639784674785314233625512891882488945578240791169766145139865620176627710674438404880243462852622402843713697490401698553838195479845305772260994797164370957244743603280134425504961760364225365358315672646538345974863722623173820843053115085013561362456943889572365, 
// 			Qinv:39319266556563865107035929646329314892393835777851400839122361407776756125022383357677401405440930570615975586293760620863605576016758583524461574000578047975932329054239645340355464484900556920604502226806836098301566459203574762556805208397379906941729250537575583002930158582512019957384848892271304675340, 
// 			CRTValues:[]rsa.CRTValue{}
// 		}
// }

// "_\xc77f\x8d\f\xf2X\x9a\xb2}\x95\xfb\xf8\t\xe7\xcf\xff.\xa7\xba\xf5\x8fAZ\x9b\x83:,\x06\x99\xd5\xec\xdc\x19\xefzwi\x8c\tY{\xbdjC4_\xf6V!=_\x9f0'\xa6rF\xe8F>Ԑ\x14;\xbaR3\x93\xc3\xe1\x02\xd3\xefz\xb2\xb6\xc8W\xeflD\xcaC\v(lO\xb1c\x03\xa6\x17\xe1\x95\xd0LǏ\xf2\xc4\xe9B\xa7\xa9\x91\xcb\xda\xc1\x8c\xdf|\xef\xa8 \xd3\xf7\xf2\xbd\t\xcd\xee\xd2\xc0|\x0f\xdd\x12Q\xb0\xf1?\xfeԷ,\xfaȳY\xf3\xcdu\xd9ʃ\xd8R\xfd\xa1X\xf4\x90:\xe1\x15\xb9XT\xf6Z\xfb\x1c\x04\x94i\xb7\xe8f\x90j\xfd$\x98KU!\x03\x14_ls\x13\t8\x85:\xd1\xd18%\xdf_ޫ,yEgD{\xbe.\xed\xcev}=\xe0\xf7\x02R+\xc2\x043-\v\xc2\xd8]|b\xf1{\x87?\xe3\xf9\x93\x94\x14\xc4\x12'n\xab\xc4\xdeݺ\x8a\t+\b\xc2F\x1b\x93&\x8c\x9a\x1c\xaa;"
